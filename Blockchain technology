import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, timestamp, data, hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.hash = hash
        self.next = None

class Blockchain:
    def __init__(self):
        self.head = None
        self.tail = None

    def add_block(self, data):
        timestamp = time.time()
        index = self.get_block_count() + 1
        previous_hash = self.get_last_block_hash() if self.head else "Genesis Block"

        # Create a new block
        new_block = Block(index, previous_hash, timestamp, data, None)

        # Calculate hash for the new block
        new_block.hash = self.calculate_hash(new_block)

        # Add the block to the linked list
        if not self.head:
            self.head = new_block
        else:
            self.tail.next = new_block
        self.tail = new_block

    def calculate_hash(self, block):
        block_string = f'{block.index}{block.previous_hash}{block.timestamp}{block.data}'
        return hashlib.sha256(block_string.encode()).hexdigest()

    def get_last_block_hash(self):
        if self.tail:
            return self.tail.hash
        return None

    def get_block_count(self):
        current_block = self.head
        count = 0
        while current_block:
            count += 1
            current_block = current_block.next
        return count

    def print_blocks(self):
        current_block = self.head
        while current_block:
            print(f"Block #{current_block.index}")
            print(f"Timestamp: {current_block.timestamp}")
            print(f"Data: {current_block.data}")
            print(f"Hash: {current_block.hash}")
            print(f"Previous Hash: {current_block.previous_hash}")
            print("\n")
            current_block = current_block.next

class Wallet:
    accounts = []

    def __init__(self, owner, balance=0):
        self.owner = owner
        self.balance = balance
        self.account_number = len(Wallet.accounts) + 1
        Wallet.accounts.append(self)

    def transfer(self, recipient, amount):
        if self.balance >= amount:
            self.balance -= amount
            recipient.balance += amount
            return True
        else:
            print("Insufficient balance.......")
            return False

    @classmethod
    def get_account_by_number(cls, account_number):
        for account in cls.accounts:
            if account.account_number == account_number:
                return account
        return None

    @classmethod
    def get_account_by_name(cls, owner_name):
        for account in cls.accounts:
            if account.owner == owner_name:
                return account
        return None

# Create a blockchain
blockchain = Blockchain()

while True:
    print("\nOptions:")
    print("1. Create Account")
    print("2. Send Money")
    print("3. Balance Inquiry")
    print("4. Print Leases")
    print("5. Exit")

    choice = input("Enter your choice (1/2/3/4/5): ")

    if choice == '1':
        owner_name = input("Enter the name for the new account: ")
        initial_balance = float(input("Enter the initial balance for the new account: "))
        Wallet(owner_name, initial_balance)
        print(f"Account for {owner_name} created successfully!")

    elif choice == '2':
        print("\nAccount List:")
        for account in Wallet.accounts:
            print(f"{account.account_number}. {account.owner}")

        sender_number = int(input("Enter the sender's account number: "))
        recipient_number = int(input("Enter the recipient's account number: "))

        sender = Wallet.get_account_by_number(sender_number)
        recipient = Wallet.get_account_by_number(recipient_number)

        if sender and recipient:
            amount = float(input("Enter the amount to send: "))
            if sender.transfer(recipient, amount):
                blockchain.add_block(f"{sender.owner} sent {amount} to {recipient.owner}")
                print("Transaction successful!")
        else:
            print("Invalid account numbers. Please try again.")

    elif choice == '3':
        print("\nAccount List:")
        for account in Wallet.accounts:
            print(f"{account.account_number}. {account.owner}")

        account_number = int(input("Enter the account number for balance inquiry: "))
        account = Wallet.get_account_by_number(account_number)

        if account:
            print(f"Balance for {account.owner}: {account.balance}")
        else:
            print("Invalid account number. Please try again.")

    elif choice == '4':
        print("\nBlockchain:")
        blockchain.print_blocks()

    elif choice == '5':
        print("Exiting the program.")
        break

    else:
        print("Invalid choice. Please enter 1, 2, 3, 4, or 5.")
